{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import openpyxl\n",
    "import numpy as np\n",
    "import itertools\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from statsmodels.tsa.statespace.sarimax import SARIMAX\n",
    "from sklearn import svm\n",
    "import datetime\n",
    "\n",
    "import statsmodels.api as sm\n",
    "\n",
    "from statsmodels.tsa.stattools import adfuller\n",
    "#from statsmodels.tsa.arima.model import ARIMA\n",
    "from statsmodels.tsa.stattools import acf, pacf\n",
    "from statsmodels.graphics.tsaplots import plot_acf, plot_pacf\n",
    "\n",
    "wb1 = openpyxl.load_workbook(r\"C:\\Users\\User\\Desktop\\Книга1.xlsx\")\n",
    "sheet = wb1['Лист4']\n",
    "sheet1 = wb1['Лист5']\n",
    "wb2 = openpyxl.load_workbook(r\"C:\\Users\\User\\Desktop\\Диплом мага\\EK3.xlsx\")\n",
    "sheet2 = wb2['Отчет']\n",
    "\n",
    "start = datetime.datetime.now()\n",
    "def df_test(frame_col):\n",
    "    print('Результат теста:')\n",
    "    df_result = adfuller(frame_col)\n",
    "    df_labels = ['ADF Test Statistic', 'p-value', '#Lags Used', 'Number of Observations Used']\n",
    "    for result_value, label in zip(df_result, df_labels):\n",
    "        print(label + ' : ' + str(result_value))\n",
    "\n",
    "    if df_result[1] <= 0.05:\n",
    "        print(\"Сильные доказательства против нулевой гипотезы, ряд является стационарным.\")\n",
    "    else:\n",
    "        print(\"Слабые доказательства против нулевой гипотезы, ряд не является стационарным.\")\n",
    "\n",
    "def search_optimal_sarima(time_series, seasonal_cycle):\n",
    "    order_vals = diff_vals = ma_vals = range(0, 2)\n",
    "    pdq_combinations = list(itertools.product(order_vals, diff_vals, ma_vals))\n",
    "    seasonal_combinations = [(combo[0], combo[1], combo[2], seasonal_cycle) for combo in pdq_combinations]\n",
    "       \n",
    "    smallest_aic = float(\"inf\")\n",
    "    optimal_order_param = optimal_seasonal_param = None\n",
    "\n",
    "    for order_param in pdq_combinations:\n",
    "        for seasonal_param in seasonal_combinations:\n",
    "            try:\n",
    "                sarima_model = SARIMAX(time_series,\n",
    "                                                         order=order_param,\n",
    "                                                         seasonal_order=seasonal_param,\n",
    "                                                         enforce_stationarity=False,\n",
    "                                                         enforce_invertibility=False)\n",
    "\n",
    "                model_results = sarima_model.fit()\n",
    "                if model_results.aic < smallest_aic:\n",
    "                    smallest_aic = model_results.aic\n",
    "                    optimal_order_param = order_param\n",
    "                    optimal_seasonal_param = seasonal_param\n",
    "            except:\n",
    "                continue\n",
    "\n",
    "    print('ARIMA{}x{} - AIC:{}'.format(optimal_order_param, optimal_seasonal_param, smallest_aic))\n",
    "\n",
    "batch1 = []\n",
    "batch2 = []\n",
    "batch3 = []\n",
    "timer = []\n",
    "n = 18\n",
    "num = 30549\n",
    "for i in range (1, num-n):\n",
    "    timer.append(sheet2.cell(row = i+n, column = 1).value)\n",
    "    batch1.append(sheet.cell(row = i, column = 1).value)\n",
    "    batch2.append(sheet.cell(row = i, column = 2).value)\n",
    "    batch3.append(sheet.cell(row = i, column = 3).value)\n",
    "#plt.plot(batch1)\n",
    "#plt.show()\n",
    "#plt.plot(batch2)\n",
    "#plt.show()\n",
    "#plt.plot(batch3)\n",
    "#plt.show()\n",
    "    \n",
    "\n",
    "df1 =  pd.DataFrame(columns = [\"flow1\"])\n",
    "df1.flow1 = batch1\n",
    "df2 =  pd.DataFrame(columns = [\"flow2\"])\n",
    "df2.flow2 = batch2\n",
    "df3 =  pd.DataFrame(columns = [\"flow_air\"])\n",
    "df3.flow_air = batch3\n",
    "\n",
    "modelling(df1, df2, df3)\n",
    "fail_checker(df1)\n",
    "fail_checker(df2)\n",
    "fail_checker(df3)\n",
    "\n",
    "def modelling(df1, df2, df3):\n",
    "    model1 = SARIMAX(df1, order=(5, 1, 0), seasonal_order=(1, 1, 1, 12))\n",
    "    model2 = SARIMAX(df2, order=(5, 1, 0), seasonal_order=(1, 1, 1, 12))\n",
    "    model3 = SARIMAX(df3, order=(5, 1, 0), seasonal_order=(1, 1, 1, 12))\n",
    "\n",
    "    result1 = model1.fit()\n",
    "    result2 = model2.fit()\n",
    "    result3 = model3.fit()\n",
    "\n",
    "    prog_start = 25000\n",
    "\n",
    "    pred1 = result1.get_prediction(start = prog_start, dynamic = False)\n",
    "    forecast_values1 = pred1.predicted_mean\n",
    "    pred2 = result2.get_prediction(start = prog_start, dynamic = False)\n",
    "    forecast_values2 = pred2.predicted_mean\n",
    "    pred3 = result3.get_prediction(start = prog_start, dynamic = False)\n",
    "    forecast_values3 = pred3.predicted_mean\n",
    "\n",
    "    #print(result1.summary())\n",
    "    #print(result2.summary())\n",
    "    #print(result3.summary())\n",
    "\n",
    "    act_values1 = df1[prog_start:][\"flow1\"]\n",
    "    act_values2 = df2[prog_start:][\"flow2\"]\n",
    "    act_values3 = df3[prog_start:][\"flow_air\"]\n",
    "\n",
    "    forecast_mse1 = ((forecast_values1 - act_values1) ** 2).mean()\n",
    "    forecast_mse2 = ((forecast_values2 - act_values2) ** 2).mean()\n",
    "    forecast_mse3 = ((forecast_values3 - act_values3) ** 2).mean()\n",
    "\n",
    "def fail_checker(df1):\n",
    "    \n",
    "    res_svm_t1 = []\n",
    "    res_svm_t2 = []\n",
    "    res_svm_t3 = []\n",
    "    for i in range (1, num-n):\n",
    "        res_svm_t1.append(sheet1.cell(row = i, column = 1).value)\n",
    "        res_svm_t2.append(sheet1.cell(row = i, column = 2).value)\n",
    "        res_svm_t3.append(sheet1.cell(row = i, column = 3).value)\n",
    "\n",
    "\n",
    "    model_svm_1 = svm.SVC(kernel = 'linear')\n",
    "    \n",
    "    model_svm_1.fit(df1, res_svm_t1)\n",
    "    pred1 = model_svm_1.predict(df1)\n",
    "    accuracy = model_svm_1.score(df1, res_svm_t1)\n",
    "    \n",
    "    if (accuracy > 0.95):\n",
    "        print(\"warning!. Breakdown detected\")\n",
    "        sheet.cell(row = 1, column = 4).value = 1\n",
    "        wb1.save(r\"C:\\Users\\User\\Desktop\\Книга1.xlsx\")\n",
    "        break\n",
    "    \n",
    "    model_svm_1.fit(df1, res_svm_t2)\n",
    "    pred1 = model_svm_1.predict(df1)\n",
    "    accuracy = model_svm_1.score(df1, res_svm_t2)\n",
    "    \n",
    "    if (accuracy > 0.95):\n",
    "        print(\"warning!. Breakdown detected\")\n",
    "        sheet.cell(row = 1, column = 4).value = 1\n",
    "        wb1.save(r\"C:\\Users\\User\\Desktop\\Книга1.xlsx\")\n",
    "        break\n",
    "    \n",
    "    model_svm_1.fit(df1, res_svm_t2)\n",
    "    pred1 = model_svm_1.predict(df1)\n",
    "    accuracy = model_svm_1.score(df1, res_svm_t2)\n",
    "\n",
    "    \n",
    "    if (accuracy > 0.95):\n",
    "        print(\"warning!. Breakdown detected\")\n",
    "        sheet.cell(row = 1, column = 4).value = 1\n",
    "        wb1.save(r\"C:\\Users\\User\\Desktop\\Книга1.xlsx\")\n",
    "        break\n",
    "    "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
